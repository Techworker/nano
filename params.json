{"name":"Techworker\\Nano","tagline":"A code readability promoting, placeholder oriented, less defective sprintf functionality","body":"nano\r\n=====\r\n\r\n[![Build Status](https://travis-ci.org/Techworker/nano.png)](https://travis-ci.org/Techworker/nano)\r\n[![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/Techworker/nano/badges/quality-score.png?s=b61d7b3ff68cad9ede06c7574177b672458f80a9)](https://scrutinizer-ci.com/g/Techworker/nano/)\r\n[![Code Coverage](https://scrutinizer-ci.com/g/Techworker/nano/badges/coverage.png?s=8f0b002ed08a392d9c7a8ea871edd367825be26a)](https://scrutinizer-ci.com/g/Techworker/nano/)\r\n\r\nA code readability promoting, placeholder oriented, less defective sprintf functionality, inspired by https://github.com/trix/nano.\r\nIt is, of course, up to you if you want accept the overhead compared to the PHP core functionality. I use it to format logging messages or Exceptions, which means mostly speed-independant code-parts. Try it out, it is small, well documented and tested.\r\n\r\n### About\r\n\r\nThis class tries to avoid manual string concenation by replacing code snippets like the following:\r\n\r\n```php\r\necho \"The Parameter \" . $param . \" with value \" . $value . \" in method \" . \r\n     __CLASS__ . \":\" . __FUNCTION__ . \" was simply wrong.\";\r\n```\r\n\r\n```php\r\necho sprintf(\"The Parameter %s with value %s in method %s:%s was simply wrong.\", \r\n    $param, $value, __CLASS__, __METHOD__\r\n);\r\n```\r\n\r\n..with..\r\n\r\n```php\r\n$message = \"The Parameter {param} with value {value} in method {class}:{method} was simply wrong\";\r\necho (new Nano($message))->data([\r\n    'param' => $param,\r\n    'value' => $value,\r\n    'method' => __METHOD__,\r\n    'class' => __CLASS__\r\n]);\r\n```\r\n\r\n### Installation\r\n\r\nYou have multiple ways to use the `Techworker\\nano` class, but at first you have to install it. At best via composerby adding it the require list:\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"techworker/nano\": \"dev-master\"\r\n    }\r\n}\r\n```\r\n\r\nAnd installing the package:\r\n\r\n```bash\r\ncomposer install\r\n```\r\n\r\nAfter that you are ready to use `Techworker\\Nano`, or you can install the package manually by downloading it (see download links) and installing it manually.\r\n\r\n### Documentation\r\n\r\nYou have a lot of possibilities to use the `Techworker\\Nano` class. We are going through some examples here but I'd like to invite you to the phpunit\\tests directory to see all examples.\r\n\r\nLets start by explaining the replacement:\r\n\r\n - Each placeholder should be within curly brackets, like `{my_placeholder}`. \r\n - You can access nested data by defining the access tree with placeholders divided by a colon, eg `{my_root_element:level1_element:level2_element}`. \r\n - You can assign additional printf and sprintf formatting options, eg `{price|%.2f} &euro;`\r\n\r\nTo start, add the following `use` Statement to your code to access `Nano` directly or use the complete `\\Techworker\\Nano` namespace\\class definition:\r\n\r\n```php\r\n\r\necho Techworker\\Nano::tpl(\"test\");\r\n\r\nuse Techworker\\Nano as Nano;\r\necho Nano::tpl(\"test\");\r\n```\r\n\r\n#### Static call\r\n\r\nThe simplest and most non-intrusive method:\r\n\r\n```php\r\necho Techworker\\Nano::tpl(\"Agent {number}\", array(\"number\" => 7));\r\n// outputs: Agent 7\r\n```\r\n\r\n#### Object-Oriented usage\r\n\r\nShort and simple, some examples for the usage.\r\n\r\n```php\r\necho (new Techworker\\Nano(\"Agent {number}\"))->data(array(\"number\" => 7));\r\n// outputs: Agent 7\r\necho (new Techworker\\Nano(\"Agent {number|%03d}\"))->data(array(\"number\" => 7));\r\n// outputs: Agent 007\r\n```\r\n\r\n##### Object Getter\r\n\r\n```php\r\ntry{\r\n    throw new \\Exception(\"Exception Message\", 110);\r\n} catch(\\Exception $ex) {\r\n    echo new Techworker\\Nano(\"Exception {message} and {code} thrown\", $ex);\r\n}\r\n// outputs: Exception Exception Message and 110 thrown\r\n```\r\n\r\n##### Deep Structures\r\n\r\n```php\r\necho new Techworker\\Nano(\"Hello {name:firstname} {name:lastname}\", [\r\n    'name' => [\r\n        'firstname' => 'Benjamin',\r\n        'lastname' => 'Ansbach'\r\n    ]\r\n]);\r\n// outputs: Hello Benjamin Ansbach\r\n```\r\n\r\n##### Simple values\r\n\r\n```php\r\necho (new Techworker\\Nano())->template(\"Hello {name}\")->value(\"name\", \"Benjamin\");\r\n// outputs: Hello Benjamin\r\n```\r\n\r\n##### Default values\r\n```php\r\necho (new Techworker\\Nano())->template(\"Hello {name}\")->default(\"Stranger\");\r\n// outputs: Hello Stranger\r\n```\r\n\r\n##### Complex and Nested!\r\n\r\n```php\r\n// Complex Example\r\n$empOfTheMonth = new stdClass();\r\n$empOfTheMonth->name = 'Benjamin Ansbach';\r\n$empOfTheMonth->month = 2;\r\n$empOfTheMonth->year = 2013;\r\n\r\nclass Income\r\n{\r\n    public function getAmount()\r\n    {\r\n        return 0;\r\n    }\r\n}\r\n\r\n$data = [\r\n    'company' => [\r\n        'name' => 'Techworker',\r\n        'employees' => ['Benjamin Ansbach', 'Techworker'],\r\n        'income' => new Income(),\r\n        'empofmonth' => $empOfTheMonth\r\n    ]\r\n];\r\n\r\n$company = <<<EOT\r\nName: {company:name}\r\nEmployees: {company:employees:0} and {company:employees:1}\r\nIncome: {company:income:amount|%.2f}$\r\nEmployee of the Month: {company:empofmonth:name} in {company:empofmonth:year}/{company:empofmonth:month|%02d}\r\nEOT;\r\n\r\necho (new Techworker\\Nano($company, $data));\r\n\r\n// outputs:\r\n// Name: Techworker\r\n// Employees: Benjamin Ansbach and Techworker\r\n// Income: 0.00$\r\n// Employee of the Month: Benjamin Ansbach in 2013/02\r\n\r\n```\r\n\r\n##### Instance Reusage Example\r\n\r\n```php\r\n$data = [\r\n    ['firstname' => 'Benjamin', 'lastname' => 'Ansbach'],\r\n    ['firstname' => 'The',      'lastname' => 'Techworker']\r\n];\r\n\r\n$nano = new Techworker\\Nano(\"{firstname} {lastname}\");\r\nforeach($data as $item) {\r\n    echo $nano->data($item) . \"\\n\";\r\n}\r\n\r\n// outputs\r\n// Benjamin Ansbach\r\n// The Techworker\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}